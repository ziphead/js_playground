//задание 1
let temperature_c = prompt('Укажите температуру по Цельсию: ');
let temperature_f = (9 / 5) * temperature_c + 32;
alert(temperature_f);
document.getElementById("one").innerHTML = `Температура по Фаренгейту:  ${temperature_f.toFixed(0)}° F`;

//задание 2
let admin;
let name;
name = 'Василий';
admin = name;
document.getElementById("two").innerHTML = `значение переменной admin:  ${admin}`;
console.log(admin);

//задание 3
/* 
10 + 10 + "10"
сначала складываются два типа number, получаем 20. затем идет конкатинация со строкой "10", 
где преобразуется число 20 в строку. "2010"
*/
console.log(10 + 10 + "10");

/*
10 + "10" + 10
вначале идет конкатинация со строкой "10" и преобразование первой цифры в строку,
потом процедура повторяется с последней цифрой. "101010"
*/
console.log(10 + "10" + 10);

/*
10 + 10 + +"10"
в данном примере знак плюс(+) или минус(-) перед строкой "10" является не оператором,
а функцией преобразующей строку в тип number, с соответствующим знаком.
*/
console.log(10 + 10 + +"10");

/*
10 / -""
typeof(-"") показывает что это тип number, следовательно пустая строка преобразованна знаком минус в -0.
В JS допустимо деление на ноль, результатом чего становится объект "infinity"
*/
typeof (-"");
console.log(10 / -"");

/*
10 / +"2,5"
NaN объект получается потому, что десятичные дроби записываются в JS через точку, а не через запятую.
*/
console.log(10 / +"2,5");

/*
Оба атрибута ассинхронно загружают скрипты.
Разница между async и defer: атрибут defer сохраняет относительную последовательность скриптов (по порядку сверху-вниз),
а async – нет (исполняет скрипт загрузившийся первым).
Кроме того, defer всегда ждёт, пока весь HTML-документ будет готов, а async – нет.
*/